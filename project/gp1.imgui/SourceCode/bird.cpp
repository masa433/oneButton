#include "bird.h"
#include "common.h"
#include <cstdlib>
#include <ctime>
#include "sign.h"
using namespace std;

BIRD bird[BIRD_MAX];
Sprite* sprBird;

// レーンのy座標を設定（左右で異なる位置の5つのレーンを画面に合わせて配置）
const float lane_positions_left[NUM_LANES] = { 100.0f, 275.0f, 450.0f, 625.0f, 800.0f };  // 左側のレーン
const float lane_positions_right[NUM_LANES] = { 150.0f, 325.0f, 500.0f, 675.0f, 850.0f };  // 右側のレーン


void bird_init() {
    srand((unsigned)time(NULL));
    sprBird = sprite_load(L"./Data/Images/親鳥.png");

    for (int i = 0; i < BIRD_MAX; i++) {
        bird[i].bird_state = 1; // 状態を1に設定して描画を有効にする
        bird[i].speed = { 0.0f, 0.0f };
        bird[i].position = { 0.0f, 0.0f };
        bird[i].scale = { 0.3f, 0.3f };
        bird[i].texPos = { 0.0f, 0.0f };
        bird[i].texSize = { BIRD_TEX_W, BIRD_TEX_H };
        bird[i].pivot = { 0.5f, 0.5f };
        bird[i].color = { 1.0f, 1.0f, 1.0f, 1.0f };

        // 鳥の初期位置を設定（ランダムにレーンを選択）
        int lane = rand() % NUM_LANES;  // レーン番号をランダムで選択
        bird[i].position.y = lane_positions_left[lane];  // 左側のレーンの位置に設定

        // 鳥の初期位置を設定（左右ランダム）
        if (rand() % 2 == 0) {
            // 左から右に飛ぶ
            bird[i].position.x = -BIRD_TEX_W;  // 画面外（左側）
            bird[i].speed.x = (rand() % (int)BIRD_SPEED_X_MAX) + .0f;  // ランダム速度
            bird[i].scale.x = -0.3f;  // 右向き
        }
        else {
            // 右から左に飛ぶ
            bird[i].position.x = 1920 + BIRD_TEX_W;  // 画面外（右側）
            bird[i].speed.x = -(rand() % (int)BIRD_SPEED_X_MAX) - 5.0f;  // ランダム速度
            bird[i].scale.x = 0.3f;  // 左向き（反転）
            bird[i].position.y = lane_positions_right[lane];  // 右側のレーンの位置に設定
        }
    }
}

void bird_deinit() {
    safe_delete(sprBird);
}

void bird_update() {
    for (int i = 0; i < BIRD_MAX; i++) {
        if (bird[i].bird_state == 0) continue;  // 状態が0の場合は何もしない

        // 鳥の移動処理（横方向のみ）
        bird[i].position.x += bird[i].speed.x;

        // 画面外に出た場合、画像を消去（状態を0に設定）
        if (bird[i].position.x < -BIRD_TEX_W || bird[i].position.x > 1920 + BIRD_TEX_W) {
            bird[i].bird_state = 0;  // 鳥を消去状態に設定
        }
    }
}

void bird_render() {
    for (int i = 0; i < BIRD_MAX; i++) {
        if (bird[i].bird_state == 0) continue;  // 状態が0の場合は描画しない

        sprite_render(
            sprBird,
            bird[i].position.x, bird[i].position.y,
            bird[i].scale.x, bird[i].scale.y,
            bird[i].texPos.x, bird[i].texPos.y,
            bird[i].texSize.x, bird[i].texSize.y,
            bird[i].pivot.x, bird[i].pivot.y,
            0.0f, // 回転なし
            bird[i].color.x, bird[i].color.y, bird[i].color.z, bird[i].color.w
        );
    }
}
